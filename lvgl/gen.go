// +build ignore

package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"regexp"
	"strings"
	"text/template"
	"time"
)

var params = regexp.MustCompile(`\((.*?)\)`)

// This method gets executed when running `go generate`
// It will parse the lv_obj_style_dec.h style declarations
// header file, and generate all bindings for the style
// getters and setters. Similarly to how the macros in the
// header file work..
func main() {
	file, err := os.Open("../include/lvgl/src/lv_core/lv_obj_style_dec.h")
	die(err)
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		if strings.HasPrefix(scanner.Text(), "_LV_OBJ_STYLE_SET_GET_DECLARE") {
			p := strings.Split(params.FindStringSubmatch(scanner.Text())[1], ",")
			fmt.Println(p)
		}
	}
	die(scanner.Err())

	f, err := os.Create("style_gen.go")
	die(err)
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
	}{
		Timestamp: time.Now(),
	})
}

// die if there's an error..
func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

// packageTemplate contains the main template for the style_gen.go file
var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by go:generate at:
// {{ .Timestamp }}
//
package lvgl

`))
