// +build ignore

package main

import (
	"bufio"
	"log"
	"os"
	"regexp"
	"strings"
	"text/template"
	"time"
)

type StyleProps struct {
	PropName  string
	FuncName  string
	ValueType string
	StyleType string
	Scalar    string
}

type Styles struct {
	Timestamp time.Time
	List      []StyleProps
}

var (
	params = regexp.MustCompile(`\((.*?)\)`)
	snake  = regexp.MustCompile("(^[A-Za-z])|_([A-Za-z])")
	list   = make(map[string]interface{})
)

// This method gets executed when running `go generate`
// It will parse the lv_obj_style_dec.h style declarations
// header file, and generate all bindings for the style
// getters and setters. Similarly to how the macros in the
// header file work..
func main() {
	file, err := os.Open("../include/lvgl/src/lv_core/lv_obj_style_dec.h")
	die(err)
	defer file.Close()

	var styles = &Styles{
		Timestamp: time.Now(),
		List:      make([]StyleProps, 0),
	}

	scanner := bufio.NewScanner(file)

	for scanner.Scan() {
		if strings.HasPrefix(scanner.Text(), "_LV_OBJ_STYLE_SET_GET_DECLARE") {
			p := strings.Split(params.FindStringSubmatch(scanner.Text())[1], ",")
			prop := strings.TrimSpace(p[0])
			if _, found := list[prop]; !found {
				list[prop] = nil
				styles.List = append(styles.List, StyleProps{
					PropName:  strings.TrimSpace(p[0]),
					FuncName:  strings.TrimSpace(p[1]),
					ValueType: strings.TrimSpace(p[2]),
					StyleType: strings.TrimSpace(p[3]),
					Scalar:    strings.TrimSpace(p[4]),
				})
			}
		}
	}
	die(scanner.Err())

	f, err := os.Create("style_gen.go")
	die(err)
	defer f.Close()

	packageTemplate.Execute(f, styles)
}

func snakeToCamelCase(str string) string {
	return snake.ReplaceAllStringFunc(str, func(s string) string {
		return strings.ToUpper(strings.Replace(s, "_", "", -1))
	})
}

func mapValueType(t string) string {
	tm := map[string]string{
		"lv_style_int_t":    "int",
		"lv_opa_t":          "LVOpacity",
		"bool":              "bool",
		"lv_blend_mode_t":   "LVBlendMode",
		"lv_grad_dir_t":     "LVGradient",
		"lv_color_t":        "LVColor",
		"lv_border_side_t":  "LVBorderSide",
		"const void *":      "unsafe.Pointer",
		"lv_align_t":        "uint8",
		"const lv_font_t *": "*LVFont",
		"const char *":      "string",
		"lv_text_decor_t":   "LVTextDecor",
		"lv_anim_path_t *":  "*LVAnimationPath",
	}

	return tm[t]
}

func mapParamType(t string) string {
	ptm := map[string]string{
		"lv_style_int_t":    "(C.lv_style_int_t)(value)",
		"lv_opa_t":          "(C.lv_opa_t)(value)",
		"bool":              "C.bool(value)",
		"lv_blend_mode_t":   "(C.lv_blend_mode_t)(value)",
		"lv_grad_dir_t":     "(C.lv_grad_dir_t)(value)",
		"lv_color_t":        "(C.lv_color_t)(value)",
		"lv_border_side_t":  "(C.lv_border_side_t)(value)",
		"const void *":      "unsafe.Pointer(value)",
		"lv_align_t":        "(C.lv_align_t)(value)",
		"const lv_font_t *": "(*C.struct__lv_font_t)(unsafe.Pointer(value))",
		"const char *":      "C.CString(value)",
		"lv_text_decor_t":   "(C.lv_text_decor_t)(value)",
		"lv_anim_path_t *":  "(*C.lv_anim_path_t)(unsafe.Pointer(value))",
		"lv_font_t":         "(C.struct__lv_font_t)(value)",
	}

	return ptm[t]
}

// exit and log if there's an error..
func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

// packageTemplate contains the main template for the style_gen.go file
var packageTemplate = template.Must(
	template.New("").
		Funcs(template.FuncMap{
			"title":        strings.Title,
			"mapValueType": mapValueType,
			"mapParamType": mapParamType,
			"snakeToCamel": snakeToCamelCase,
		}).
		Parse(`// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by go:generate at:
// {{ .Timestamp }}
//
package lvgl

/*
  #cgo CFLAGS: -I../include -I../include/lvgl -I../include/lv_drivers/display -I../include/lv_drivers/indev
  #include "lv_conf.h"
  #include "lv_drv_conf.h"
  #include "lvgl.h"
  #include "fbdev.h"
  #include "evdev.h"
  #include <stdlib.h>

  #cgo LDFLAGS: -L../include -llvgl
*/
import "C"
import "unsafe"

{{ range $p := .List }}
{{- $vt := mapValueType $p.ValueType }}
func (obj *LVObj) GetStyle{{- snakeToCamel $p.FuncName -}}(part uint8) {{ $vt }} {
	return ({{ $vt }})(C.lv_obj_get_style_{{- $p.FuncName -}}((*C.struct__lv_obj_t)(unsafe.Pointer(obj)), C.uchar(part)))
}

func (style *LVStyle) Set{{- snakeToCamel $p.FuncName -}}(state LVState, value {{ mapValueType $p.ValueType }}) {
	C.lv_style_set_{{- $p.FuncName -}}((*C.struct___7)(unsafe.Pointer(style)), C.uchar(state), {{ mapParamType $p.ValueType }})
}

func (obj *LVObj) SetLocalStyle{{- snakeToCamel $p.FuncName -}}(part uint8, state LVState, value {{ mapValueType $p.ValueType }}) {
	C.lv_obj_set_style_local_{{- $p.FuncName -}}((*C.struct__lv_obj_t)(unsafe.Pointer(obj)), C.uchar(part), C.uchar(state), {{ mapParamType $p.ValueType }})
}
{{ end -}}
`))
